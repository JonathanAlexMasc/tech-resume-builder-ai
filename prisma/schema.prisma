generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[] // ðŸ‘ˆ updated to camelCase plural
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?
  linkedin  String?
  github    String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "constraint_1")

  createdAt  DateTime     @default(now())
  Experience Experience[]
  projects   Project[]
  skills     Skill[]
  education  Education[]
}

model Experience {
  id        Int       @id @default(autoincrement())
  role      String
  company   String
  location  String?
  startDate DateTime
  endDate   DateTime?

  resumeId Int
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  bulletPoints BulletPoint[]

  createdAt DateTime @default(now())
}

model BulletPoint {
  id      Int    @id @default(autoincrement())
  content String

  // Optional foreign keys to either experience or project
  experienceId Int?
  experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Project {
  id       Int     @id @default(autoincrement())
  title    String?
  resumeId Int
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  bulletPoints BulletPoint[]

  createdAt DateTime @default(now())
}

model Skill {
  id           Int      @id @default(autoincrement())
  name         String

  isLanguage   Boolean  @default(false)
  isFramework  Boolean  @default(false)
  isDev        Boolean  @default(false)
  isCloud      Boolean  @default(false)

  resumeId     Int
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
}

model Education {
  id        Int      @id @default(autoincrement())
  resumeId  Int
  resume    Resume   @relation(fields: [resumeId], references: [id])
  school    String
  location  String
  startDate DateTime
  endDate   DateTime?
  major     String
  createdAt DateTime @default(now())
}

